To implement a global release process in GitHub Actions with automated deployments and controlled production release, you need to design a CI/CD pipeline with environments and approval workflows. Here's a robust setup for your needs:

✅ Workflow Overview
Developer pushes to GitHub repo → triggers Dev deployment and creates a new release.

UAT deployment is automatically triggered on merge/push to UAT branch and creates a new release.

Production deployment requires manual approval via GitHub Environments.

Versioning (e.g., v1.0.3) is maintained across all stages.

This setup applies globally to every new release.

🏗️ Folder & Branch Structure Suggestion
Branches:

dev – development environment

uat – staging/UAT environment

main – production

📁 GitHub Action Files
1. Dev Workflow – .github/workflows/dev.yml
name: Deploy to Dev

on:
  push:
    branches: [dev]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build project
        run: |
          echo "Building the project..."

      - name: Deploy to Dev
        run: |
          echo "Deploying to Dev environment..."

      - name: Create Dev Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: dev-${{ github.run_number }}
          name: "Dev Release ${{ github.run_number }}"
          body: "Deployed to Dev from ${{ github.sha }}"

 2) UAT Workflow – .github/workflows/uat.yml
 
 name: Deploy to UAT

on:
  push:
    branches: [uat]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build project
        run: |
          echo "Building for UAT..."

      - name: Deploy to UAT
        run: |
          echo "Deploying to UAT..."

      - name: Create UAT Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: uat-${{ github.run_number }}
          name: "UAT Release ${{ github.run_number }}"
          body: "Deployed to UAT from ${{ github.sha }}"
		  
3) Prod Workflow – .github/workflows/prod.yml

name: Deploy to Production

on:
  push:
    branches: [main]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment:
      name: production
      url: https://your-prod-url.com

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build project
        run: |
          echo "Building for production..."

      - name: Deploy to Production
        run: |
          echo "Deploying to production..."

      - name: Create Prod Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: prod-${{ github.run_number }}
          name: "Prod Release ${{ github.run_number }}"
          body: "Deployed to Production from ${{ github.sha }}"

Setup GitHub Environments for Production Approval
Go to Repo > Settings > Environments

Create production environment

Add required reviewers (approvers)

Enable wait timer or manual trigger if needed

Tips for a Global and Reusable Setup
Create composite actions or reusable workflows to share build and deploy steps.

Use a consistent versioning strategy, e.g., semver using tags like v1.2.3.

Add tagging strategy in Dev and UAT to automatically bump versions (use actions/create-release or custom versioning).

Add Slack/MS Teams notifications post-release using webhooks if needed.
Versioning Enhancement (Optional)
Use mathieudutour/github-tag-action for semantic versioning:

- name: Bump version and push tag
  uses: mathieudutour/github-tag-action@v6.1
  with:
    github_token: ${{ secrets.GITHUB_TOKEN }}
    release_branches: main, uat, dev
=======================================================================================


Great! What you're describing is a centralized/global release pipeline that can be shared across multiple repositories in GitHub. This is entirely possible using Reusable Workflows in GitHub Actions.
Goal:
Maintain one central/global repository (e.g., org/release-pipeline) that contains a global release workflow, and every other repo can call this pipeline.

Step-by-Step Setup for Global GitHub Actions Pipeline
1. Create a Central Repo for Reusable Workflows
Let's call this repo: org/global-release-pipeline

Inside it, create a file:

.github/workflows/release.yml

# global-release-pipeline/.github/workflows/release.yml

name: Global Release Workflow

on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
      deploy_target:
        required: true
        type: string
    secrets:
      TOKEN:
        required: true

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}

    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Build
        run: echo "Building project for ${{ inputs.environment }}"

      - name: Deploy
        run: echo "Deploying to ${{ inputs.deploy_target }}"

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ inputs.environment }}-${{ github.run_number }}
          name: "${{ inputs.environment }} Release ${{ github.run_number }}"
          body: "Deployed ${{ github.sha }} to ${{ inputs.deploy_target }}"
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN }}
		  
2. Call the Global Workflow from Any Repo
In any of your project repos (e.g., project-app, service-api), create a .github/workflows/dev-release.yml like this:

# project-repo/.github/workflows/dev-release.yml

name: Call Global Dev Release

on:
  push:
    branches: [dev]

jobs:
  call-global-release:
    uses: org/global-release-pipeline/.github/workflows/release.yml@main
    with:
      environment: dev
      deploy_target: dev-env.example.com
    secrets:
      TOKEN: ${{ secrets.GITHUB_TOKEN }}

3. Enforce Manual Approval for Prod in Global Workflow
In the global repo's release.yml, GitHub Environments control manual approval.

Add to your release.yml:
environment:
  name: production
  url: https://prod.example.com
  
  Then in the GitHub UI:

Go to the global-release-pipeline repo → Settings > Environments > production

Add required approvers

Benefits of This Setup
✅ One place to update logic for all release steps
✅ Easier version control and audit trail
✅ GitHub-native and secure
✅ Can extend to include Slack notifications, version bumping, testing, etc.
✅ Easy to onboard new repos — just add a caller file!

Optional Enhancements
Centralize a versioning strategy (e.g., read version from package.json, .csproj, or .tf file).

Add matrix deployments for multi-region or multi-service.

Integrate security scans, unit tests, and artifact uploads.
